/**
 * This class is generated by jOOQ
 */
package de.blogblog.jooq.tables;


import de.blogblog.ZonedDateTimeConverter;
import de.blogblog.jooq.Blogblog;
import de.blogblog.jooq.Keys;
import de.blogblog.jooq.tables.records.BlPostsRecord;

import java.time.ZonedDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BlPosts extends TableImpl<BlPostsRecord> {

    private static final long serialVersionUID = -1853910749;

    /**
     * The reference instance of <code>blogblog.bl_posts</code>
     */
    public static final BlPosts BL_POSTS = new BlPosts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BlPostsRecord> getRecordType() {
        return BlPostsRecord.class;
    }

    /**
     * The column <code>blogblog.bl_posts.id</code>.
     */
    public final TableField<BlPostsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('blogblog.bl_posts_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>blogblog.bl_posts.title</code>.
     */
    public final TableField<BlPostsRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>blogblog.bl_posts.content</code>.
     */
    public final TableField<BlPostsRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>blogblog.bl_posts.created</code>.
     */
    public final TableField<BlPostsRecord, ZonedDateTime> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "", new ZonedDateTimeConverter());

    /**
     * The column <code>blogblog.bl_posts.author</code>.
     */
    public final TableField<BlPostsRecord, Integer> AUTHOR = createField("author", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>blogblog.bl_posts.hidden</code>.
     */
    public final TableField<BlPostsRecord, Boolean> HIDDEN = createField("hidden", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>blogblog.bl_posts</code> table reference
     */
    public BlPosts() {
        this("bl_posts", null);
    }

    /**
     * Create an aliased <code>blogblog.bl_posts</code> table reference
     */
    public BlPosts(String alias) {
        this(alias, BL_POSTS);
    }

    private BlPosts(String alias, Table<BlPostsRecord> aliased) {
        this(alias, aliased, null);
    }

    private BlPosts(String alias, Table<BlPostsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Blogblog.BLOGBLOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BlPostsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_BL_POSTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BlPostsRecord> getPrimaryKey() {
        return Keys.BL_POSTS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BlPostsRecord>> getKeys() {
        return Arrays.<UniqueKey<BlPostsRecord>>asList(Keys.BL_POSTS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<BlPostsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BlPostsRecord, ?>>asList(Keys.BL_POSTS__BL_POSTS_AUTHOR_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BlPosts as(String alias) {
        return new BlPosts(alias, this);
    }

    /**
     * Rename this table
     */
    public BlPosts rename(String name) {
        return new BlPosts(name, null);
    }
}
